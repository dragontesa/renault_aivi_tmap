/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p AudioManagerInterface com.bosch.AutomotiveProxy.AudioManager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */
#include <QDBusArgument>
#include <QDBusConnection>
#include <QDBusConnectionInterface>
#include <QDBusInterface>
#include <QDBusMetaType>
#include <QDBusServiceWatcher>
#include <QDebug>
#include <QList>

#include "AudioManagerInterface.h"

/*
 * Implementation of interface class ComBoschAutomotiveProxyAudioManagerInterface
 */

ComBoschAutomotiveProxyAudioManagerInterface::ComBoschAutomotiveProxyAudioManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
    : QDBusAbstractInterface(service, path, staticInterfaceName(), connection, parent)
    , m_pThirdPartyVoiceIF(0)
{
    qDebug() << "ComBoschAutomotiveProxyAudioManagerInterface::ComBoschAutomotiveProxyAudioManagerInterface";
//    m_pThirdPartyVoiceIF = (third::party::voice::ThirdPartyVoiceIF*)parent;
//    qDebug() << "ComBoschAutomotiveProxyAudioManagerInterface::ComBoschAutomotiveProxyAudioManagerInterface::m_pThirdPartyVoiceIF: " << m_pThirdPartyVoiceIF->objectName();
//    connect(this, &ComBoschAutomotiveProxyAudioManagerInterface::OnAllocate, this, &ComBoschAutomotiveProxyAudioManagerInterface::toOnAllocate);
//    connect(this, &ComBoschAutomotiveProxyAudioManagerInterface::OnDeAllocate, this, &ComBoschAutomotiveProxyAudioManagerInterface::toOnDeAllocate);
//    connect(this, &ComBoschAutomotiveProxyAudioManagerInterface::OnMuteState, this, &ComBoschAutomotiveProxyAudioManagerInterface::toOnMuteState);
//    connect(this, &ComBoschAutomotiveProxyAudioManagerInterface::SourceActivity, this, &ComBoschAutomotiveProxyAudioManagerInterface::toSourceActivity);
}

ComBoschAutomotiveProxyAudioManagerInterface::~ComBoschAutomotiveProxyAudioManagerInterface()
{
}

//void ComBoschAutomotiveProxyAudioManagerInterface::toOnAllocate(uchar source, const QString &sink) {
//    qDebug() << "ComBoschAutomotiveProxyAudioManagerInterface::OnAllocate";
//    if(m_pThirdPartyVoiceIF != NULL) {
//       m_pThirdPartyVoiceIF->vOnAllcocateSignal((gchar)source, (const gchar*)sink.toLatin1().constData());
//    }
//}
//void ComBoschAutomotiveProxyAudioManagerInterface::toOnDeAllocate(uchar source) {
//    qDebug() << "ComBoschAutomotiveProxyAudioManagerInterface::OnDeAllocate";
//    if(m_pThirdPartyVoiceIF != NULL) {
//       m_pThirdPartyVoiceIF->vOnDeAllcocateSignal((gchar)source);
//    }
//}
//void ComBoschAutomotiveProxyAudioManagerInterface::toOnMuteState(uchar source, uchar mute_state) {
//    qDebug() << "ComBoschAutomotiveProxyAudioManagerInterface::OnMuteState";
//    if(m_pThirdPartyVoiceIF != NULL) {
//       m_pThirdPartyVoiceIF->vOnMuteStateSignal((gchar)source);
//    }
//}
//void ComBoschAutomotiveProxyAudioManagerInterface::toSourceActivity(uchar source, ushort status) {
//    qDebug() << "ComBoschAutomotiveProxyAudioManagerInterface::SourceActivity";
//    if(m_pThirdPartyVoiceIF != NULL) {
//       m_pThirdPartyVoiceIF->vOnSourceActivitySignal((gchar)source, status);
//    }
//}

QDBusArgument &operator<<(QDBusArgument &argument, const SINKINFO& sinkinfo)
{
    argument.beginStructure();
    argument << sinkinfo.devType;
    argument << sinkinfo.devName;
    argument.endStructure();

    return argument;
}

const QDBusArgument &operator>>(const QDBusArgument &argument, SINKINFO &sinkinfo)
{
    argument.beginStructure();
    argument >> sinkinfo.devType;
    argument >> sinkinfo.devName;
    argument.endStructure();

    return argument;
}







