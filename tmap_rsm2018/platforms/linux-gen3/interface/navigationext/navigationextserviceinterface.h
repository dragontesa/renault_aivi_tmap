/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp NavigationExtService.xml -i navigationexttype.h -p navigationextserviceinterface
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NAVIGATIONEXTSERVICEINTERFACE_H_1513925433
#define NAVIGATIONEXTSERVICEINTERFACE_H_1513925433

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "navigationexttype.h"
#include "tdbusabstractinterface.h"

/*
 * Proxy class for interface bosch.cm.profile
 */
class BoschCmProfileInterface: public SKT::TDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "bosch.cm.profile"; }

public:
    BoschCmProfileInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~BoschCmProfileInterface();

    Q_PROPERTY(uchar activeProfile READ activeProfile)
    inline uchar activeProfile() const
    { return qvariant_cast< uchar >(property("activeProfile")); }

    Q_PROPERTY(copyInfo copyProfile READ copyProfile)
    inline copyInfo copyProfile() const
    { return qvariant_cast< copyInfo >(property("copyProfile")); }

    Q_PROPERTY(uchar createProfile READ createProfile)
    inline uchar createProfile() const
    { return qvariant_cast< uchar >(property("createProfile")); }

    Q_PROPERTY(uint dataChanged READ dataChanged)
    inline uint dataChanged() const
    { return qvariant_cast< uint >(property("dataChanged")); }

    Q_PROPERTY(uchar deleteProfile READ deleteProfile)
    inline uchar deleteProfile() const
    { return qvariant_cast< uchar >(property("deleteProfile")); }

    Q_PROPERTY(uchar profileImage READ profileImage)
    inline uchar profileImage() const
    { return qvariant_cast< uchar >(property("profileImage")); }

    Q_PROPERTY(QString profileName READ profileName)
    inline QString profileName() const
    { return qvariant_cast< QString >(property("profileName")); }

    Q_PROPERTY(uint status READ status)
    inline uint status() const
    { return qvariant_cast< uint >(property("status")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<uint> doChangeToProfile(uchar userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("doChangeToProfile"), argumentList);
    }

    inline QDBusPendingReply<uint> doCopyProfile(uchar sourceUserID, uchar destUserID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourceUserID) << QVariant::fromValue(destUserID);
        return asyncCallWithArgumentList(QStringLiteral("doCopyProfile"), argumentList);
    }

    inline QDBusPendingReply<uint, uchar> doCreateProfile(const QString &newName, uchar imageID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(newName) << QVariant::fromValue(imageID);
        return asyncCallWithArgumentList(QStringLiteral("doCreateProfile"), argumentList);
    }
    inline QDBusReply<uint> doCreateProfile(const QString &newName, uchar imageID, uchar &newUserID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(newName) << QVariant::fromValue(imageID);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("doCreateProfile"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            newUserID = qdbus_cast<uchar>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<uint> doDeleteProfile(uchar userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("doDeleteProfile"), argumentList);
    }

    inline QDBusPendingReply<uint> doImportProfileImage(const QString &sourcePath, ushort width, ushort height, ushort slotIdx, bool bSetForCurrentProfile)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourcePath) << QVariant::fromValue(width) << QVariant::fromValue(height) << QVariant::fromValue(slotIdx) << QVariant::fromValue(bSetForCurrentProfile);
        return asyncCallWithArgumentList(QStringLiteral("doImportProfileImage"), argumentList);
    }

    inline QDBusPendingReply<uint, QString, bool> doRegisterApp(const QString &AppName)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(AppName);
        return asyncCallWithArgumentList(QStringLiteral("doRegisterApp"), argumentList);
    }

    inline QDBusPendingReply<uint> doSetProfileImage(uchar imageID, uchar userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(imageID) << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("doSetProfileImage"), argumentList);
    }

    inline QDBusPendingReply<uint> do_SetProfileName(const QString &newName, uchar userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(newName) << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("do_SetProfileName"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> getProfileImages()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getProfileImages"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getProfileNames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getProfileNames"), argumentList);
    }

    inline QDBusPendingReply<types> getProfileTypes()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getProfileTypes"), argumentList);
    }

    inline QDBusPendingReply<uint> importProfileImage(const QString &sourcePath, ushort width, ushort height)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourcePath) << QVariant::fromValue(width) << QVariant::fromValue(height);
        return asyncCallWithArgumentList(QStringLiteral("importProfileImage"), argumentList);
    }

    inline QDBusPendingReply<> onDataChanged(uint ApplicationPID, uint Result)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ApplicationPID) << QVariant::fromValue(Result);
        return asyncCallWithArgumentList(QStringLiteral("onDataChanged"), argumentList);
    }

    inline QDBusPendingReply<> onProfileCopied(uint ApplicationPID, uint Result)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ApplicationPID) << QVariant::fromValue(Result);
        return asyncCallWithArgumentList(QStringLiteral("onProfileCopied"), argumentList);
    }

    inline QDBusPendingReply<> onProfileCreated(uint ApplicationPID, uint Result)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ApplicationPID) << QVariant::fromValue(Result);
        return asyncCallWithArgumentList(QStringLiteral("onProfileCreated"), argumentList);
    }

    inline QDBusPendingReply<> onProfileDeleted(uint ApplicationPID, uint Result)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ApplicationPID) << QVariant::fromValue(Result);
        return asyncCallWithArgumentList(QStringLiteral("onProfileDeleted"), argumentList);
    }

    inline QDBusPendingReply<uint> removeUserImage(ushort slotIdx)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(slotIdx);
        return asyncCallWithArgumentList(QStringLiteral("removeUserImage"), argumentList);
    }


Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.bosch.cm.navigation.NavigationExtService
 */
class OrgBoschCmNavigationNavigationExtServiceInterface: public SKT::TDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.bosch.cm.navigation.NavigationExtService"; }

public:
    OrgBoschCmNavigationNavigationExtServiceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgBoschCmNavigationNavigationExtServiceInterface();

    Q_PROPERTY(uchar NaviPropertyCallServiceStatus READ naviPropertyCallServiceStatus)
    inline uchar naviPropertyCallServiceStatus() const
    { return qvariant_cast< uchar >(property("NaviPropertyCallServiceStatus")); }

    Q_PROPERTY(uchar NaviPropertyDateFormat READ naviPropertyDateFormat)
    inline uchar naviPropertyDateFormat() const
    { return qvariant_cast< uchar >(property("NaviPropertyDateFormat")); }

    Q_PROPERTY(NXDevMediaInfo NaviPropertyDevMediaInfo READ naviPropertyDevMediaInfo)
    inline NXDevMediaInfo naviPropertyDevMediaInfo() const
    { return qvariant_cast< NXDevMediaInfo >(property("NaviPropertyDevMediaInfo")); }

    Q_PROPERTY(uchar NaviPropertyDialPOICallStatus READ naviPropertyDialPOICallStatus)
    inline uchar naviPropertyDialPOICallStatus() const
    { return qvariant_cast< uchar >(property("NaviPropertyDialPOICallStatus")); }

    Q_PROPERTY(uchar NaviPropertyMexMode READ naviPropertyMexMode)
    inline uchar naviPropertyMexMode() const
    { return qvariant_cast< uchar >(property("NaviPropertyMexMode")); }

    Q_PROPERTY(uchar NaviPropertyMultiAmbienceLightingColorState READ naviPropertyMultiAmbienceLightingColorState)
    inline uchar naviPropertyMultiAmbienceLightingColorState() const
    { return qvariant_cast< uchar >(property("NaviPropertyMultiAmbienceLightingColorState")); }

    Q_PROPERTY(uchar NaviPropertyTimeFormat READ naviPropertyTimeFormat)
    inline uchar naviPropertyTimeFormat() const
    { return qvariant_cast< uchar >(property("NaviPropertyTimeFormat")); }

    Q_PROPERTY(NXDateTimeDetailInfo NaviPropertyUpdateDateTimeDetailInfo READ naviPropertyUpdateDateTimeDetailInfo)
    inline NXDateTimeDetailInfo naviPropertyUpdateDateTimeDetailInfo() const
    { return qvariant_cast< NXDateTimeDetailInfo >(property("NaviPropertyUpdateDateTimeDetailInfo")); }

    Q_PROPERTY(uchar NaviPropertyUpdateDimmingStatus READ naviPropertyUpdateDimmingStatus)
    inline uchar naviPropertyUpdateDimmingStatus() const
    { return qvariant_cast< uchar >(property("NaviPropertyUpdateDimmingStatus")); }

    Q_PROPERTY(uchar NaviPropertyUpdateDistanceUnit READ naviPropertyUpdateDistanceUnit)
    inline uchar naviPropertyUpdateDistanceUnit() const
    { return qvariant_cast< uchar >(property("NaviPropertyUpdateDistanceUnit")); }

    Q_PROPERTY(uchar NaviPropertyUpdateHandBrakeStatus READ naviPropertyUpdateHandBrakeStatus)
    inline uchar naviPropertyUpdateHandBrakeStatus() const
    { return qvariant_cast< uchar >(property("NaviPropertyUpdateHandBrakeStatus")); }

    Q_PROPERTY(uint NaviPropertyUpdateHmiState READ naviPropertyUpdateHmiState)
    inline uint naviPropertyUpdateHmiState() const
    { return qvariant_cast< uint >(property("NaviPropertyUpdateHmiState")); }

    Q_PROPERTY(uchar NaviPropertyUpdateLanguageIndex READ naviPropertyUpdateLanguageIndex)
    inline uchar naviPropertyUpdateLanguageIndex() const
    { return qvariant_cast< uchar >(property("NaviPropertyUpdateLanguageIndex")); }

    Q_PROPERTY(uchar NaviPropertyUpdateLanguageSyncSrcId READ naviPropertyUpdateLanguageSyncSrcId)
    inline uchar naviPropertyUpdateLanguageSyncSrcId() const
    { return qvariant_cast< uchar >(property("NaviPropertyUpdateLanguageSyncSrcId")); }

    Q_PROPERTY(NXLockStateInfoList NaviPropertyUpdateLockStates READ naviPropertyUpdateLockStates)
    inline NXLockStateInfoList naviPropertyUpdateLockStates() const
    { return qvariant_cast< NXLockStateInfoList >(property("NaviPropertyUpdateLockStates")); }

    Q_PROPERTY(uchar NaviPropertyUpdateReverseGearState READ naviPropertyUpdateReverseGearState)
    inline uchar naviPropertyUpdateReverseGearState() const
    { return qvariant_cast< uchar >(property("NaviPropertyUpdateReverseGearState")); }

    Q_PROPERTY(uchar NaviPropertyAppStateNavigation READ naviPropertyAppStateNavigation)
    inline uchar naviPropertyAppStateNavigation() const
    { return qvariant_cast< uchar >(property("NaviPropertyAppStateNavigation")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> NaviMethAbortNaviAnnouncement()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("NaviMethAbortNaviAnnouncement"), argumentList);
    }

    inline QDBusPendingReply<bool> NaviMethDialPOI(const QString &szTelNumber)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(szTelNumber);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethDialPOI"), argumentList);
    }

    inline QDBusPendingReply<QString, bool> NaviMethGetDeviceID()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("NaviMethGetDeviceID"), argumentList);
    }
    inline QDBusReply<QString> NaviMethGetDeviceID(bool &bResult)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("NaviMethGetDeviceID"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            bResult = qdbus_cast<bool>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<bool> NaviMethGetMountingAngle()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("NaviMethGetMountingAngle"), argumentList);
    }

    inline QDBusPendingReply<> NaviMethGetPublicConfigItem(const QString &publicItemName)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(publicItemName);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethGetPublicConfigItem"), argumentList);
    }

    inline QDBusPendingReply<bool> NaviMethPlayBeep()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("NaviMethPlayBeep"), argumentList);
    }

    inline QDBusPendingReply<bool> NaviMethPlayBeepMelody(const QString &szMelodyPath)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(szMelodyPath);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethPlayBeepMelody"), argumentList);
    }

    inline QDBusPendingReply<bool> NaviMethPlayNaviAnnouncement(uint u32Type, const QStringList &aContentList)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(u32Type) << QVariant::fromValue(aContentList);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethPlayNaviAnnouncement"), argumentList);
    }

    inline QDBusPendingReply<bool> NaviMethPlayNaviAnnouncementByAudioSource(uint u32Type, uint u32AudioSource, const QStringList &aContentList)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(u32Type) << QVariant::fromValue(u32AudioSource) << QVariant::fromValue(aContentList);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethPlayNaviAnnouncementByAudioSource"), argumentList);
    }

    inline QDBusPendingReply<> NaviMethContextSwitch(uchar u8ContextState)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(u8ContextState);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethContextSwitch"), argumentList);
    }

/** 
 *
 * MUST use NaviMethSystemCommand instead of this function on LXC
 */
    inline QDBusPendingReply<bool> NaviMethRemountPath(uint emRemountType, const QString &szRemountPath)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(emRemountType) << QVariant::fromValue(szRemountPath);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethRemountPath"), argumentList);
    }

    inline QDBusPendingReply<bool> NaviMethRestartSystem(uint emRestartType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(emRestartType);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethRestartSystem"), argumentList);
    }

    inline QDBusPendingReply<bool> NaviMethSystemCommand(uint emCmdCode, const QString &strSrcPath, const QString &strDestPath)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(emCmdCode) << QVariant::fromValue(strSrcPath) << QVariant::fromValue(strDestPath);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethSystemCommand"), argumentList);
    }

    inline QDBusPendingReply<> NaviMethThirdPartyNaviStartState(uint u32ThirdPartyNaviStartState)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(u32ThirdPartyNaviStartState);
        return asyncCallWithArgumentList(QStringLiteral("NaviMethThirdPartyNaviStartState"), argumentList);
    }

    inline QDBusPendingReply<> NaviMethUpdateLock(const QString &strLockName, uchar eLockRequest)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(strLockName) << QVariant::fromValue(eLockRequest);
        return asyncCallWithArgumentList(QLatin1String("NaviMethUpdateLock"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ContextSwitchRequest(uint ContextSwitchRequest);
    void NaviSigNaviAnnouncementStatus(uint u32NaviAnnouncementStatus);
    void NaviSignalAppStateNavigation(uchar u8SpiAppStateNav);
    void NaviSignalDialError(uchar u8DialField, uchar u8DialErrorCode);
    void NaviSignalMountingAngle(NXMountingAngle mountingAngle);
    void NaviSignalPublicConfigItem(uchar u8Status, NXConfigInfoItemList publicConfigData);
    void NaviSignalRFAntennaStatus(uchar u8RFAntenna, uchar u8RFAntennaStatus, uchar u8ConnectionCurrent);
    void NaviSignalRemountStatus(uchar u8RemountStatus);
    void NaviSignalSpeedValue(ushort u16SpeedValue);
    void PlayBeepStatus(uchar uBeepStatus);
    void PlayMelodyStatus(uchar uMelodyStatus);
    void ResetToFactorySettings();
};

namespace bosch {
  namespace cm {
    typedef ::BoschCmProfileInterface profile;
  }
}
namespace org {
  namespace bosch {
    namespace cm {
      namespace navigation {
        typedef ::OrgBoschCmNavigationNavigationExtServiceInterface NavigationExtService;
      }
    }
  }
}
#endif
