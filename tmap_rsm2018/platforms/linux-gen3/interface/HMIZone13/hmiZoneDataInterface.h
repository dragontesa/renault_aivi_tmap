/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp zoneData.xml -i hmiZonetype.h -p hmiZoneDataInterface
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef HMIZONEDATAINTERFACE_H_1522891669
#define HMIZONEDATAINTERFACE_H_1522891669

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "hmiZonetype.h"

/*
 * Proxy class for interface bosch.cm.ai.nissan.hmi.zoneDataService.HMIZoneData
 */
class BoschCmAiNissanHmiZoneDataServiceHMIZoneDataInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "bosch.cm.ai.nissan.hmi.zoneDataService.HMIZoneData"; }

public:
    BoschCmAiNissanHmiZoneDataServiceHMIZoneDataInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~BoschCmAiNissanHmiZoneDataServiceHMIZoneDataInterface();

    Q_PROPERTY(uint Zone3PullUpListState READ zone3PullUpListState)
    inline uint zone3PullUpListState() const
    { return qvariant_cast< uint >(property("Zone3PullUpListState")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> setEditFieldUpdate(uchar appId, uchar cursorPosition, const QString &searchbarText)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(cursorPosition) << QVariant::fromValue(searchbarText);
        return asyncCallWithArgumentList(QLatin1String("setEditFieldUpdate"), argumentList);
    }

    inline QDBusPendingReply<> setEditfieldText(uchar appId, const QString &searchBarText, bool isHighLightRequired, uchar highlightStartIndex, uchar highlightCount)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(searchBarText) << QVariant::fromValue(isHighLightRequired) << QVariant::fromValue(highlightStartIndex) << QVariant::fromValue(highlightCount);
        return asyncCallWithArgumentList(QLatin1String("setEditfieldText"), argumentList);
    }

    inline QDBusPendingReply<> setKeyBoardKeyStatus(const QString &keyID, int keyState)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyID) << QVariant::fromValue(keyState);
        return asyncCallWithArgumentList(QLatin1String("setKeyBoardKeyStatus"), argumentList);
    }

    inline QDBusPendingReply<> setKeyboard(uchar appId, uchar keyboardType, const QString &validCharacters)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(keyboardType) << QVariant::fromValue(validCharacters);
        return asyncCallWithArgumentList(QLatin1String("setKeyboard"), argumentList);
    }

    inline QDBusPendingReply<> setZone1(uchar appId, Zone1InfoHolder zone1Info)
    {
        qDebug() << "hmiZoneDataInterface->setZone1(" << appId << ", " << zone1Info.m_zone1Type << ", ...)";
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(zone1Info);
        return asyncCallWithArgumentList(QLatin1String("setZone1"), argumentList);
    }

    inline QDBusPendingReply<> setZone3(uchar appId, Zone3InfoHolder zone3Info)
    {
        qDebug() << "hmiZoneDataInterface->setZone3" << appId << ", ...)";
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(zone3Info);
        return asyncCallWithArgumentList(QLatin1String("setZone3"), argumentList);
    }

    inline QDBusPendingReply<> setZone3SubTextInfo(const QStringList &zone3SubText)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone3SubText);
        return asyncCallWithArgumentList(QLatin1String("setZone3SubTextInfo"), argumentList);
    }

    inline QDBusPendingReply<> setZoneVisibility(uchar appId, bool visibilityState, uchar displayRegionType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(visibilityState) << QVariant::fromValue(displayRegionType);
        return asyncCallWithArgumentList(QLatin1String("setZoneVisibility"), argumentList);
    }
Q_SIGNALS: // SIGNALS
    void ActiveNotificationType(uint activeNotification);
    void buttonPressed(uchar appId, uint buttonId, uchar buttonState);
    void keyboardInputFinished(uchar appId, const QString &searchbarText);
    void keyboardKeyPressed(uchar appId, const QString &searchbarText, const QString &keyPressed, bool IsCtrlKey, bool IsSpeedLockActive);
    void pullupButtonPressed(uchar appId, uchar buttonId, uchar buttonState);
    void shiftKeyOnEntry(uchar appId);
    void togglePressed(uchar appId, uint buttonId, uchar buttonState, bool toggleValue);
};

namespace bosch {
  namespace cm {
    namespace ai {
      namespace nissan {
        namespace hmi {
          namespace zoneDataService {
            typedef ::BoschCmAiNissanHmiZoneDataServiceHMIZoneDataInterface HMIZoneData;
          }
        }
      }
    }
  }
}
#endif
