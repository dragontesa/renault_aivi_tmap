/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp PrivateDataEncryption_qdbus.xml -i PrivateDataEncryption.h -p privateDatainterface
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef PRIVATEDATAINTERFACE_H_1529383888
#define PRIVATEDATAINTERFACE_H_1529383888

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "privateDataEncryptiontype.h"

/*
 * Proxy class for interface com.bosch.AutomotiveProxy.PrivateDataEncryption
 */
class ComBoschAutomotiveProxyPrivateDataEncryptionInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.bosch.AutomotiveProxy.PrivateDataEncryption"; }

public:
    ComBoschAutomotiveProxyPrivateDataEncryptionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComBoschAutomotiveProxyPrivateDataEncryptionInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<short, NSPrivateDataList> DecryptData(uchar agwKeyId, NSPrivateDataList encryptedData)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agwKeyId) << QVariant::fromValue(encryptedData);
        return asyncCallWithArgumentList(QLatin1String("DecryptData"), argumentList);
    }
    inline QDBusReply<short> DecryptData(uchar agwKeyId, NSPrivateDataList encryptedData, NSPrivateDataList &plainData)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agwKeyId) << QVariant::fromValue(encryptedData);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("DecryptData"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            plainData = qdbus_cast<NSPrivateDataList>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, NSPrivateDataList> EncryptData(uchar agwKeyId, NSPrivateDataList plainData)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agwKeyId) << QVariant::fromValue(plainData);
        return asyncCallWithArgumentList(QLatin1String("EncryptData"), argumentList);
    }
    inline QDBusReply<short> EncryptData(uchar agwKeyId, NSPrivateDataList plainData, NSPrivateDataList &encryptedData)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(agwKeyId) << QVariant::fromValue(plainData);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("EncryptData"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            encryptedData = qdbus_cast<NSPrivateDataList>(reply.arguments().at(1));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace bosch {
    namespace AutomotiveProxy {
      typedef ::ComBoschAutomotiveProxyPrivateDataEncryptionInterface PrivateDataEncryption;
    }
  }
}
#endif
