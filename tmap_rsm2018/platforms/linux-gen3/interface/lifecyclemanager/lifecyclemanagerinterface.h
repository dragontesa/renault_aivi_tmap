/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.bosch.AutomotiveProxy.LifeCycleManager.xml -p lifecyclemanagerinterface -i lifecyclemanagertype.h
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef LIFECYCLEMANAGERINTERFACE_H
#define LIFECYCLEMANAGERINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "lifecyclemanagertype.h"

/*
 * Proxy class for interface com.bosch.AutomotiveProxy.LifeCycleManager
 */
class ComBoschAutomotiveProxyLifeCycleManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.bosch.AutomotiveProxy.LifeCycleManager"; }

public:
    ComBoschAutomotiveProxyLifeCycleManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComBoschAutomotiveProxyLifeCycleManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> LifecycleRequestComplete(uint request_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(request_id);
        return asyncCallWithArgumentList(QStringLiteral("LifecycleRequestComplete"), argumentList);
    }

    inline QDBusPendingReply<uint> Register(LCMCredentials credentials, uint request_mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(credentials) << QVariant::fromValue(request_mode);
        return asyncCallWithArgumentList(QStringLiteral("Register"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void LifecycleRequest(uint mode, uint request_id);
};

namespace com {
  namespace bosch {
    namespace AutomotiveProxy {
      typedef ::ComBoschAutomotiveProxyLifeCycleManagerInterface LifeCycleManager;
    }
  }
}
#endif
