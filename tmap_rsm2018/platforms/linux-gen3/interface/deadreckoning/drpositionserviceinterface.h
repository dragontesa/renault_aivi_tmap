/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p DrPositionService DrPositionService.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DRPOSITIONSERVICE_H_1499265277
#define DRPOSITIONSERVICE_H_1499265277

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "drpositiontype.h"

/*
 * Proxy class for interface com.bosch.DrPositionService.Navigation
 */
class ComBoschDrPositionServiceNavigationInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.bosch.DrPositionService.Navigation"; }

public:
    ComBoschDrPositionServiceNavigationInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComBoschDrPositionServiceNavigationInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<VersionInfo> GetPositionVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetPositionVersion"), argumentList);
    }

    inline QDBusPendingReply<> MapMatchingFeedback(uint Timestamp, MMCandidateList Candidates, MMCandidate OffroadCandidate)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(Timestamp) << QVariant::fromValue(Candidates) << QVariant::fromValue(OffroadCandidate);
        return asyncCallWithArgumentList(QLatin1String("MapMatchingFeedback"), argumentList);
    }

    inline QDBusPendingReply<> SetNextStartPosition(double Longitude, double Latitude, int Heading)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(Longitude) << QVariant::fromValue(Latitude) << QVariant::fromValue(Heading);
        return asyncCallWithArgumentList(QStringLiteral("SetNextStartPosition"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ProxyDeadReckPosition(uint Timestamp, uint TimePosix, double Longitude, double Latitude, int PosErrCepLarge, int PosErrCepSmall, int PosErrCepHeading, int Heading, int HeadingError, double Turnrate, double TurnrateError, short Speed, short SpeedError, short Acceleration, short AccelerationError, int Height, int HeightError, ushort SensorFlags, ushort DrInfoValidity);
    void ProxyDetailsGNSS(uint Timestamp, ushort SatellitesUsed, ushort Speed, ushort Heading, SvList SpaceVehicles);
    void ProxyMountingAngles(uchar AngRX, uchar AngRY, uchar AngRZ, uchar AngSX, uchar AngSY, uchar AngSZ, uchar AngTX, uchar AngTY, uchar AngTZ, uchar Status, uint Reserved1, uint Reserved2);
    void ProxyPositionGNSS(uint Timestamp, ushort Year, uchar Month, uchar Day, uchar Hour, uchar Minute, uchar Second, uchar FixStatus, double Longitude, double Latitude, short Altitude, double PDOP, double HDOP);
};

namespace com {
  namespace bosch {
    namespace DrPositionService {
      typedef ::ComBoschDrPositionServiceNavigationInterface Navigation;
    }
  }
}
#endif
