/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp GuiControl.xml -i guicontroltype.h -p guicontrolinterface
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef GUICONTROLINTERFACE_H
#define GUICONTROLINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "guicontroltype.h"
#include "tdbusabstractinterface.h"

/*
 * Proxy class for interface bosch.gui.cm.ai.guicontrol
 */
class BoschGuiCmAiGuicontrolInterface: public SKT::TDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "bosch.gui.cm.ai.guicontrol"; }

public:
    BoschGuiCmAiGuicontrolInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~BoschGuiCmAiGuicontrolInterface();

    Q_PROPERTY(uchar NaviPropertyFocusConfig READ naviPropertyFocusConfig)
    inline uchar naviPropertyFocusConfig() const
    { return qvariant_cast< uchar >(property("NaviPropertyFocusConfig")); }

    Q_PROPERTY(GCNaviGadgetFocusInfo NaviGadgetFocusStatus READ naviGadgetFocusStatus WRITE setNaviGadgetFocusStatus)
    inline GCNaviGadgetFocusInfo naviGadgetFocusStatus() const
    { return qvariant_cast< GCNaviGadgetFocusInfo >(property("NaviGadgetFocusStatus")); }
    void setNaviGadgetFocusStatus(GCNaviGadgetFocusInfo value)
    {};

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> BeepForwarding(int beepType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(beepType);
        return asyncCallWithArgumentList(QStringLiteral("BeepForwarding"), argumentList);
    }

    inline QDBusPendingReply<uint> ChangeSurfaceState(uint SurfaceState, uint AppID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(SurfaceState) << QVariant::fromValue(AppID);
        return asyncCallWithArgumentList(QStringLiteral("ChangeSurfaceState"), argumentList);
    }

    inline QDBusPendingReply<> ContextSwitchResponse(uchar u8ContextState)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(u8ContextState);
        return asyncCallWithArgumentList(QStringLiteral("ContextSwitchResponse"), argumentList);
    }

    inline QDBusPendingReply<> EncoderForwarding(int encCode, int encValue)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(encCode) << QVariant::fromValue(encValue);
        return asyncCallWithArgumentList(QStringLiteral("EncoderForwarding"), argumentList);
    }

    inline QDBusPendingReply<uint, uint, uint, uint> GetPopupProperty()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetPopupProperty"), argumentList);
    }
    inline QDBusReply<uint> GetPopupProperty(uint &u32SurfaceID, uint &u32Width, uint &u32Height)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetPopupProperty"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 4) {
            u32SurfaceID = qdbus_cast<uint>(reply.arguments().at(1));
            u32Width = qdbus_cast<uint>(reply.arguments().at(2));
            u32Height = qdbus_cast<uint>(reply.arguments().at(3));
        }
        return reply;
    }

    inline QDBusPendingReply<uint, uint, uint, uint> GetToastPopupProperty()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetToastPopupProperty"), argumentList);
    }
    inline QDBusReply<uint> GetToastPopupProperty(uint &u32SurfaceID, uint &u32Width, uint &u32Height)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetToastPopupProperty"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 4) {
            u32SurfaceID = qdbus_cast<uint>(reply.arguments().at(1));
            u32Width = qdbus_cast<uint>(reply.arguments().at(2));
            u32Height = qdbus_cast<uint>(reply.arguments().at(3));
        }
        return reply;
    }

    inline QDBusPendingReply<> HidePopup(const QString &viewname)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(viewname);
        return asyncCallWithArgumentList(QStringLiteral("HidePopup"), argumentList);
    }

    inline QDBusPendingReply<> KeyForwarding(GCKeyInfo keyRequest)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyRequest);
        return asyncCallWithArgumentList(QStringLiteral("KeyForwarding"), argumentList);
    }

    inline QDBusPendingReply<> ShowPopup(const QString &viewname)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(viewname);
        return asyncCallWithArgumentList(QStringLiteral("ShowPopup"), argumentList);
    }

    inline QDBusPendingReply<> SwitchToView(uint viewid)
    {
        qDebug() << "PlatformControllerGen3::switchToView(" << viewid << ")";
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(viewid);
        return asyncCallWithArgumentList(QStringLiteral("SwitchToView"), argumentList);
    }

    inline QDBusPendingReply<> UpdateClientStatus(const QString &name, uint status)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(status);
        return asyncCallWithArgumentList(QStringLiteral("UpdateClientStatus"), argumentList);
    }

    inline QDBusPendingReply<> UpdateSurfaceStateResp(uint SurfaceState, uint u32SurfaceID, uint u32CommandID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(SurfaceState) << QVariant::fromValue(u32SurfaceID) << QVariant::fromValue(u32CommandID);
        return asyncCallWithArgumentList(QStringLiteral("UpdateSurfaceStateResp"), argumentList);
    }

    inline QDBusPendingReply<EnavHMIProperty> setEnavHMIProperty(EnavHMIProperty hmiPropertyStatus)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(hmiPropertyStatus);
        return asyncCallWithArgumentList(QStringLiteral("setEnavHMIProperty"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ActivateExternalImageProvider(uint activate, QList<int> instanceIds, int consumerId);
    void ContextSwitchRequest(uint ContextSwitchRequest);
    void NaviGadgetFocusInteractionSignal(FocusInteractionInfo focusInteractionInfo);
    void ExternalImageProviderTouch(TouchInfo data, int instanceId);
    void Init_GUI(uint u32LayerID, uint u32SurfaceID, uint u32Width, uint u32Height);
    void KeyInfoForwarding(GCKeyInfo data);
    void PopupStatus(uint surfaceId, uint popupstatus);
    void UpdateSurfaceState(uint u32CommandID, uint SurfaceState);
};

namespace bosch {
  namespace gui {
    namespace cm {
      namespace ai {
        typedef ::BoschGuiCmAiGuicontrolInterface guicontrol;
      }
    }
  }
}
#endif
