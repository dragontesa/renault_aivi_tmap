/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.bosch.AutomotiveProxy.SecureDataCommunication.xml -p securedatacommunicationinterface
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SECUREDATACOMMUNICATIONINTERFACE_H
#define SECUREDATACOMMUNICATIONINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.bosch.AutomotiveProxy.SecureDataCommunication
 */
class ComBoschAutomotiveProxySecureDataCommunicationInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.bosch.AutomotiveProxy.SecureDataCommunication"; }

public:
    ComBoschAutomotiveProxySecureDataCommunicationInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComBoschAutomotiveProxySecureDataCommunicationInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<ushort> CheckCert(const QByteArray &data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QStringLiteral("CheckCert"), argumentList);
    }

    inline QDBusPendingReply<QByteArray, ushort> DecryptWithDeviceKey(const QByteArray &ciphertext, qulonglong algorithm)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ciphertext) << QVariant::fromValue(algorithm);
        return asyncCallWithArgumentList(QStringLiteral("DecryptWithDeviceKey"), argumentList);
    }
    inline QDBusReply<QByteArray> DecryptWithDeviceKey(const QByteArray &ciphertext, qulonglong algorithm, ushort &result)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ciphertext) << QVariant::fromValue(algorithm);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("DecryptWithDeviceKey"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            result = qdbus_cast<ushort>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QByteArray, ushort> GetDeviceCert(qulonglong algorithm)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(algorithm);
        return asyncCallWithArgumentList(QStringLiteral("GetDeviceCert"), argumentList);
    }
    inline QDBusReply<QByteArray> GetDeviceCert(qulonglong algorithm, ushort &result)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(algorithm);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetDeviceCert"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            result = qdbus_cast<ushort>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QByteArray, ushort> SignWithDeviceKey(const QByteArray &data, qulonglong algorithm)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(data) << QVariant::fromValue(algorithm);
        return asyncCallWithArgumentList(QStringLiteral("SignWithDeviceKey"), argumentList);
    }
    inline QDBusReply<QByteArray> SignWithDeviceKey(const QByteArray &data, qulonglong algorithm, ushort &result)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(data) << QVariant::fromValue(algorithm);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("SignWithDeviceKey"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            result = qdbus_cast<ushort>(reply.arguments().at(1));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace bosch {
    namespace AutomotiveProxy {
      typedef ::ComBoschAutomotiveProxySecureDataCommunicationInterface SecureDataCommunication;
    }
  }
}
#endif
