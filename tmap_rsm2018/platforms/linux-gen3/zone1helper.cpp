#include "zone1helper.h"
#include <QDebug>

namespace SKT
{

void Zone1Helper::setupForEditBox(ContentInfo &ci)
{
    qDebug() << "Zone1Helper::setupForEditBox()";

    Content c0;
    c0.m_nodeIndex = 4294967295;
    c0.m_bgInfo.m_bgBasePath = "";
    c0.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c0.m_bgInfo.m_textColor = WHITE;
    c0.m_bgInfo.m_textEffect = NOSHADOW;
    c0.m_nodeType = ROOT;
    c0.m_iconPath = "";
    c0.m_buttonState = NORMAL;
    textInfoList til;
    textInfo ti;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c0.m_textData.append(til);
    c0.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c0.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c0.m_editfieldMode = FREEMODE;
    c0.m_sdsType = LISTENING;
    c0.m_floatValue = 0;
    c0.m_nodeLayoutType = NodeLayoutType_INVALID;
    c0.m_keypadFormat = 1;
    c0.m_inwardExitAnimationStatus = true;
    c0.m_outwardExitAnimationStatus = true;
    c0.m_inwardEntryAnimationStatus = true;
    c0.m_outwardEntryAnimationStatus = true;
    ci.append(c0);

    til.clear();

    Content c1;
    c1.m_nodeIndex = 1;
    c1.m_bgInfo.m_bgBasePath = "";
    c1.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c1.m_bgInfo.m_textColor = WHITE;
    c1.m_bgInfo.m_textEffect = NOSHADOW;
    c1.m_nodeType = NodeType_DEFAULT;
    c1.m_iconPath = "";
    c1.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = QObject::tr("명칭/주소/전화번호");
    ti.m_type = false;
    til.append(ti);
    c1.m_textData.append(til);
    c1.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c1.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c1.m_editfieldMode = FREEMODE;
    c1.m_sdsType = LISTENING;
    c1.m_floatValue = 0;
    c1.m_nodeLayoutType = NodeLayoutType_INVALID;
    c1.m_keypadFormat = 1;
    c1.m_inwardExitAnimationStatus = true;
    c1.m_outwardExitAnimationStatus = true;
    c1.m_inwardEntryAnimationStatus = true;
    c1.m_outwardEntryAnimationStatus = true;
    ci.append(c1);

    til.clear();

    Content c2;
    c2.m_nodeIndex = 2;
    c2.m_bgInfo.m_bgBasePath = "";
    c2.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c2.m_bgInfo.m_textColor = WHITE;
    c2.m_bgInfo.m_textEffect = NOSHADOW;
    c2.m_nodeType = NodeType_DEFAULT;
    c2.m_iconPath = "Bitmaps##RIVIResources#Icon_List_Small#Icon_List_Small_Browse";
    c2.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c2.m_textData.append(til);
    c2.m_speedRestriction.m_speedRestrictionCategory = TEXT_INPUT;
    c2.m_speedRestriction.m_speedRestrictionBehavior = 65;
    c2.m_editfieldMode = FREEMODE;
    c2.m_sdsType = LISTENING;
    c2.m_floatValue = 0;
    c2.m_nodeLayoutType = NodeLayoutType_INVALID;
    c2.m_keypadFormat = 1;
    c2.m_inwardExitAnimationStatus = true;
    c2.m_outwardExitAnimationStatus = true;
    c2.m_inwardEntryAnimationStatus = true;
    c2.m_outwardEntryAnimationStatus = true;
    ci.append(c2);
}

void Zone1Helper::setupForKeyboard(ContentInfo &ci)
{
    qDebug() << "Zone1Helper::setupForKeyboard()";

    Content c0;
    c0.m_nodeIndex = 4294967295;
    c0.m_bgInfo.m_bgBasePath = "";
    c0.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c0.m_bgInfo.m_textColor = WHITE;
    c0.m_bgInfo.m_textEffect = NOSHADOW;
    c0.m_nodeType = ROOT;
    c0.m_iconPath = "";
    c0.m_buttonState = NORMAL;
    textInfoList til;
    textInfo ti;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c0.m_textData.append(til);
    c0.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c0.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c0.m_editfieldMode = FREEMODE;
    c0.m_sdsType = LISTENING;
    c0.m_floatValue = 0;
    c0.m_nodeLayoutType = NodeLayoutType_INVALID;
    c0.m_keypadFormat = 1;
    c0.m_inwardExitAnimationStatus = true;
    c0.m_outwardExitAnimationStatus = true;
    c0.m_inwardEntryAnimationStatus = true;
    c0.m_outwardEntryAnimationStatus = true;
    ci.append(c0);

    til.clear();

    Content c1;
    c1.m_nodeIndex = 1;
    c1.m_bgInfo.m_bgBasePath = "";
    c1.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c1.m_bgInfo.m_textColor = WHITE;
    c1.m_bgInfo.m_textEffect = NOSHADOW;
    c1.m_nodeType = NodeType_DEFAULT;
    c1.m_iconPath = "";
    c1.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c1.m_textData.append(til);
    c1.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c1.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c1.m_editfieldMode = FREEMODE;
    c1.m_sdsType = LISTENING;
    c1.m_floatValue = 0;
    c1.m_nodeLayoutType = NodeLayoutType_INVALID;
    c1.m_keypadFormat = 1;
    c1.m_inwardExitAnimationStatus = true;
    c1.m_outwardExitAnimationStatus = true;
    c1.m_inwardEntryAnimationStatus = true;
    c1.m_outwardEntryAnimationStatus = true;
    ci.append(c1);

    til.clear();

    Content c2;
    c2.m_nodeIndex = 2;
    c2.m_bgInfo.m_bgBasePath = "";
    c2.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c2.m_bgInfo.m_textColor = WHITE;
    c2.m_bgInfo.m_textEffect = NOSHADOW;
    c2.m_nodeType = NodeType_DEFAULT;
    c2.m_iconPath = "";
    c2.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c2.m_textData.append(til);
    c2.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c2.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c2.m_editfieldMode = FREEMODE;
    c2.m_sdsType = LISTENING;
    c2.m_floatValue = 0;
    c2.m_nodeLayoutType = NodeLayoutType_INVALID;
    c2.m_keypadFormat = 1;
    c2.m_inwardExitAnimationStatus = true;
    c2.m_outwardExitAnimationStatus = true;
    c2.m_inwardEntryAnimationStatus = true;
    c2.m_outwardEntryAnimationStatus = true;
    ci.append(c2);

    til.clear();

    Content c3;
    c3.m_nodeIndex = 3;
    c3.m_bgInfo.m_bgBasePath = "";
    c3.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c3.m_bgInfo.m_textColor = WHITE;
    c3.m_bgInfo.m_textEffect = NOSHADOW;
    c3.m_nodeType = NodeType_DEFAULT;
    c3.m_iconPath = "Bitmaps##RIVIResources#Icon_List_Small#Icon_List_Small_NAV_OnBoardResult";
    c3.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c3.m_textData.append(til);
    c3.m_speedRestriction.m_speedRestrictionCategory = TEXT_INPUT;
    c3.m_speedRestriction.m_speedRestrictionBehavior = 65;
    c3.m_editfieldMode = FREEMODE;
    c3.m_sdsType = LISTENING;
    c3.m_floatValue = 0;
    c3.m_nodeLayoutType = NodeLayoutType_INVALID;
    c3.m_keypadFormat = 1;
    c3.m_inwardExitAnimationStatus = true;
    c3.m_outwardExitAnimationStatus = true;
    c3.m_inwardEntryAnimationStatus = true;
    c3.m_outwardEntryAnimationStatus = true;
    ci.append(c3);

    til.clear();

    Content c4;
    c4.m_nodeIndex = 4;
    c4.m_bgInfo.m_bgBasePath = "";
    c4.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c4.m_bgInfo.m_textColor = WHITE;
    c4.m_bgInfo.m_textEffect = NOSHADOW;
    c4.m_nodeType = NodeType_DEFAULT;
    c4.m_iconPath = "";
    c4.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = QObject::tr("명칭/주소/전화번호");
    ti.m_type = false;
    til.append(ti);
    c4.m_textData.append(til);
    c4.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c4.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c4.m_editfieldMode = FREEMODE;
    c4.m_sdsType = LISTENING;
    c4.m_floatValue = 0;
    c4.m_nodeLayoutType = NodeLayoutType_INVALID;
    c4.m_keypadFormat = 1;
    c4.m_inwardExitAnimationStatus = true;
    c4.m_outwardExitAnimationStatus = true;
    c4.m_inwardEntryAnimationStatus = true;
    c4.m_outwardEntryAnimationStatus = true;
    ci.append(c4);

    til.clear();

    Content c5;
    c5.m_nodeIndex = 5;
    c5.m_bgInfo.m_bgBasePath = "";
    c5.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c5.m_bgInfo.m_textColor = WHITE;
    c5.m_bgInfo.m_textEffect = NOSHADOW;
    c5.m_nodeType = NodeType_DEFAULT;
    c5.m_iconPath = "";
    c5.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = "1";
    ti.m_type = false;
    til.append(ti);
    c5.m_textData.append(til);
    c5.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c5.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c5.m_editfieldMode = FREEMODE;
    c5.m_sdsType = LISTENING;
    c5.m_floatValue = 0;
    c5.m_nodeLayoutType = NodeLayoutType_INVALID;
    c5.m_keypadFormat = 1;
    c5.m_inwardExitAnimationStatus = true;
    c5.m_outwardExitAnimationStatus = true;
    c5.m_inwardEntryAnimationStatus = true;
    c5.m_outwardEntryAnimationStatus = true;
    ci.append(c5);
}

void Zone1Helper::setupForKeyboardPulldown(ContentInfo &ci, const QString& text)
{
    Content c0;
    c0.m_nodeIndex = 4294967295;
    c0.m_bgInfo.m_bgBasePath = "";
    c0.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c0.m_bgInfo.m_textColor = WHITE;
    c0.m_bgInfo.m_textEffect = NOSHADOW;
    c0.m_nodeType = ROOT;
    c0.m_iconPath = "";
    c0.m_buttonState = NORMAL;
    textInfoList til;
    textInfo ti;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c0.m_textData.append(til);
    c0.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c0.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c0.m_editfieldMode = FREEMODE;
    c0.m_sdsType = LISTENING;
    c0.m_floatValue = 0;
    c0.m_nodeLayoutType = NodeLayoutType_INVALID;
    c0.m_keypadFormat = 1;
    c0.m_inwardExitAnimationStatus = true;
    c0.m_outwardExitAnimationStatus = true;
    c0.m_inwardEntryAnimationStatus = true;
    c0.m_outwardEntryAnimationStatus = true;
    ci.append(c0);

    Content c1;
    c1.m_nodeIndex = 1;
    c1.m_bgInfo.m_bgBasePath = "";
    c1.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c1.m_bgInfo.m_textColor = WHITE;
    c1.m_bgInfo.m_textEffect = NOSHADOW;
    c1.m_nodeType = PULLUP;
    c1.m_iconPath = "";
    c1.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c1.m_textData.append(til);
    c1.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c1.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c1.m_editfieldMode = FREEMODE;
    c1.m_sdsType = LISTENING;
    c1.m_floatValue = 0;
    c1.m_nodeLayoutType = NodeLayoutType_INVALID;
    c1.m_keypadFormat = 1;
    c1.m_inwardExitAnimationStatus = true;
    c1.m_outwardExitAnimationStatus = true;
    c1.m_inwardEntryAnimationStatus = true;
    c1.m_outwardEntryAnimationStatus = true;
    ci.append(c1);

    Content c2;
    c2.m_nodeIndex = 4;
    c2.m_bgInfo.m_bgBasePath = "";
    c2.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c2.m_bgInfo.m_textColor = WHITE;
    c2.m_bgInfo.m_textEffect = NOSHADOW;
    c2.m_nodeType = PULLUP;
    c2.m_iconPath = "";
    c2.m_buttonState = INACTIVE;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c2.m_textData.append(til);
    c2.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c2.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c2.m_editfieldMode = FREEMODE;
    c2.m_sdsType = LISTENING;
    c2.m_floatValue = 0;
    c2.m_nodeLayoutType = NodeLayoutType_INVALID;
    c2.m_keypadFormat = 1;
    c2.m_inwardExitAnimationStatus = true;
    c2.m_outwardExitAnimationStatus = true;
    c2.m_inwardEntryAnimationStatus = true;
    c2.m_outwardEntryAnimationStatus = true;
    ci.append(c2);

    Content c3;
    c3.m_nodeIndex = 5;
    c3.m_bgInfo.m_bgBasePath = "";
    c3.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c3.m_bgInfo.m_textColor = WHITE;
    c3.m_bgInfo.m_textEffect = NOSHADOW;
    c3.m_nodeType = PULLUP;
    c3.m_iconPath = "";
    c3.m_buttonState = INACTIVE;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c3.m_textData.append(til);
    c3.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c3.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c3.m_editfieldMode = FREEMODE;
    c3.m_sdsType = LISTENING;
    c3.m_floatValue = 0;
    c3.m_nodeLayoutType = NodeLayoutType_INVALID;
    c3.m_keypadFormat = 1;
    c3.m_inwardExitAnimationStatus = true;
    c3.m_outwardExitAnimationStatus = true;
    c3.m_inwardEntryAnimationStatus = true;
    c3.m_outwardEntryAnimationStatus = true;
    ci.append(c3);
}

void Zone1Helper::setupForEditBoxWithCountNumber(ContentInfo &ci, const QString& text, int searchCount)
{
    qDebug() << "Zone1Helper::setupForEditBoxWithCountNumber()";
    Content c0;
    c0.m_nodeIndex = 4294967295;
    c0.m_bgInfo.m_bgBasePath = "";
    c0.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c0.m_bgInfo.m_textColor = WHITE;
    c0.m_bgInfo.m_textEffect = NOSHADOW;
    c0.m_nodeType = ROOT;
    c0.m_iconPath = "";
    c0.m_buttonState = NORMAL;
    textInfoList til;
    textInfo ti;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c0.m_textData.append(til);
    c0.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c0.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c0.m_editfieldMode = FREEMODE;
    c0.m_sdsType = LISTENING;
    c0.m_floatValue = 0;
    c0.m_nodeLayoutType = NodeLayoutType_INVALID;
    c0.m_keypadFormat = 1;
    c0.m_inwardExitAnimationStatus = true;
    c0.m_outwardExitAnimationStatus = true;
    c0.m_inwardEntryAnimationStatus = true;
    c0.m_outwardEntryAnimationStatus = true;
    ci.append(c0);

    til.clear();

    Content c1;
    c1.m_nodeIndex = 1;
    c1.m_bgInfo.m_bgBasePath = "";
    c1.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c1.m_bgInfo.m_textColor = WHITE;
    c1.m_bgInfo.m_textEffect = NOSHADOW;
    c1.m_nodeType = NodeType_DEFAULT;
    c1.m_iconPath = "";
    c1.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c1.m_textData.append(til);
    c1.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c1.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c1.m_editfieldMode = FREEMODE;
    c1.m_sdsType = LISTENING;
    c1.m_floatValue = 0;
    c1.m_nodeLayoutType = NodeLayoutType_INVALID;
    c1.m_keypadFormat = 1;
    c1.m_inwardExitAnimationStatus = true;
    c1.m_outwardExitAnimationStatus = true;
    c1.m_inwardEntryAnimationStatus = true;
    c1.m_outwardEntryAnimationStatus = true;
    ci.append(c1);

    til.clear();

    Content c2;
    c2.m_nodeIndex = 2;
    c2.m_bgInfo.m_bgBasePath = "";
    c2.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c2.m_bgInfo.m_textColor = WHITE;
    c2.m_bgInfo.m_textEffect = NOSHADOW;
    c2.m_nodeType = NodeType_DEFAULT;
    c2.m_iconPath = "";
    c2.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c2.m_textData.append(til);
    c2.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c2.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c2.m_editfieldMode = FREEMODE;
    c2.m_sdsType = LISTENING;
    c2.m_floatValue = 0;
    c2.m_nodeLayoutType = NodeLayoutType_INVALID;
    c2.m_keypadFormat = 1;
    c2.m_inwardExitAnimationStatus = true;
    c2.m_outwardExitAnimationStatus = true;
    c2.m_inwardEntryAnimationStatus = true;
    c2.m_outwardEntryAnimationStatus = true;
    ci.append(c2);

    til.clear();

    Content c3;
    c3.m_nodeIndex = 3;
    c3.m_bgInfo.m_bgBasePath = "";
    c3.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c3.m_bgInfo.m_textColor = WHITE;
    c3.m_bgInfo.m_textEffect = NOSHADOW;
    c3.m_nodeType = NodeType_DEFAULT;
    c3.m_iconPath = "Bitmaps##RIVIResources#Icon_List_Small#Icon_List_Small_NAV_OnBoardResult";
    c3.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c3.m_textData.append(til);
    c3.m_speedRestriction.m_speedRestrictionCategory = TEXT_INPUT;
    c3.m_speedRestriction.m_speedRestrictionBehavior = 65;
    c3.m_editfieldMode = FREEMODE;
    c3.m_sdsType = LISTENING;
    c3.m_floatValue = 0;
    c3.m_nodeLayoutType = NodeLayoutType_INVALID;
    c3.m_keypadFormat = 1;
    c3.m_inwardExitAnimationStatus = true;
    c3.m_outwardExitAnimationStatus = true;
    c3.m_inwardEntryAnimationStatus = true;
    c3.m_outwardEntryAnimationStatus = true;
    ci.append(c3);

    til.clear();

    Content c4;
    c4.m_nodeIndex = 4;
    c4.m_bgInfo.m_bgBasePath = "";
    c4.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c4.m_bgInfo.m_textColor = WHITE;
    c4.m_bgInfo.m_textEffect = NOSHADOW;
    c4.m_nodeType = NodeType_DEFAULT;
    c4.m_iconPath = "";
    c4.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = QObject::tr("명칭/주소/전화번호");
    ti.m_type = false;
    til.append(ti);
    c4.m_textData.append(til);
    c4.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c4.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c4.m_editfieldMode = FREEMODE;
    c4.m_sdsType = LISTENING;
    c4.m_floatValue = 0;
    c4.m_nodeLayoutType = NodeLayoutType_INVALID;
    c4.m_keypadFormat = 1;
    c4.m_inwardExitAnimationStatus = true;
    c4.m_outwardExitAnimationStatus = true;
    c4.m_inwardEntryAnimationStatus = true;
    c4.m_outwardEntryAnimationStatus = true;
    ci.append(c4);

    til.clear();

    Content c5;
    c5.m_nodeIndex = 5;
    c5.m_bgInfo.m_bgBasePath = "";
    c5.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c5.m_bgInfo.m_textColor = WHITE;
    c5.m_bgInfo.m_textEffect = NOSHADOW;
    c5.m_nodeType = NodeType_DEFAULT;
    c5.m_iconPath = "";
    c5.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = searchCount < 100 ? QString::number(searchCount) : "99"; //TMCRSM-2728. "99+" -> "99" Bosch guide.
    ti.m_type = false;
    til.append(ti);
    c5.m_textData.append(til);
    c5.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c5.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c5.m_editfieldMode = FREEMODE;
    c5.m_sdsType = LISTENING;
    c5.m_floatValue = 9;
    c5.m_nodeLayoutType = NodeLayoutType_INVALID;
    c5.m_keypadFormat = 1;
    c5.m_inwardExitAnimationStatus = true;
    c5.m_outwardExitAnimationStatus = true;
    c5.m_inwardEntryAnimationStatus = true;
    c5.m_outwardEntryAnimationStatus = true;
    ci.append(c5);
}

void Zone1Helper::setupForTitle(ContentInfo &ci, const QString& title)
{
    qDebug() << "Zone1Helper::setupForTitle()";
    Content c0;
    c0.m_nodeIndex = 4294967295;
    c0.m_bgInfo.m_bgBasePath = "";
    c0.m_bgInfo.m_bgColor = TRANSPARENT;
    c0.m_bgInfo.m_textColor = WHITE;
    c0.m_bgInfo.m_textEffect = SHADOW;
    c0.m_nodeType = ROOT;
    c0.m_iconPath = "";
    c0.m_buttonState = NORMAL;
    textInfoList til;
    textInfo ti;
    ti.m_textId = 0;
    ti.m_textStr = "";
    ti.m_type = false;
    til.append(ti);
    c0.m_textData.append(til);
    c0.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c0.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c0.m_editfieldMode = FREEMODE;
    c0.m_sdsType = LISTENING;
    c0.m_floatValue = 0;
    c0.m_nodeLayoutType = NodeLayoutType_INVALID;
    c0.m_keypadFormat = 1;
    c0.m_inwardExitAnimationStatus = true;
    c0.m_outwardExitAnimationStatus = true;
    c0.m_inwardEntryAnimationStatus = true;
    c0.m_outwardEntryAnimationStatus = true;
    ci.append(c0);

    til.clear();

    Content c1;
    c1.m_nodeIndex = 1;
    c1.m_bgInfo.m_bgBasePath = "";
    c1.m_bgInfo.m_bgColor = NodeBgColor_DEFAULT;
    c1.m_bgInfo.m_textColor = WHITE;
    c1.m_bgInfo.m_textEffect = NOSHADOW;
    c1.m_nodeType = NodeType_DEFAULT;
    c1.m_iconPath = "";
    c1.m_buttonState = NORMAL;
    ti.m_textId = 0;
    ti.m_textStr = title;
    ti.m_type = false;
    til.append(ti);
    c1.m_textData.append(til);
    c1.m_speedRestriction.m_speedRestrictionCategory = SRCATEGORY_INVALID;
    c1.m_speedRestriction.m_speedRestrictionBehavior = 255;
    c1.m_editfieldMode = FREEMODE;
    c1.m_sdsType = LISTENING;
    c1.m_floatValue = 0;
    c1.m_nodeLayoutType = NodeLayoutType_INVALID;
    c1.m_keypadFormat = 1;
    c1.m_inwardExitAnimationStatus = true;
    c1.m_outwardExitAnimationStatus = true;
    c1.m_inwardEntryAnimationStatus = true;
    c1.m_outwardEntryAnimationStatus = true;
    ci.append(c1);
}

}
